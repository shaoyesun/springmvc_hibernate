springmvc整合hibernate
一、数据源连接
二、事务配置
    1.applicationContext.xml
        <!--配置spring事务管理-->
        <bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
            <property name="sessionFactory" ref="sessionFactory"></property>
        </bean>

        <!--1.注解实现事务-->
        <tx:annotation-driven transaction-manager="transactionManager"/>
    2.applicationContext.xml
        <!--spring的配置文件与springMVC的配置文件对包的重复扫描装配会照成失效在主容器中（applicationContext.xml，将Controller的注解排除掉-->
        <context:component-scan base-package="example">
            <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
        </context:component-scan>
    3.@Transactional(propagation = Propagation.REQUIRED, isolation = Isolation.READ_COMMITTED)
三、shiro配置
    1.pom.xml
      <dependency>
         <groupId>org.apache.shiro</groupId>
         <artifactId>shiro-all</artifactId>
         <version>1.2.3</version>
      </dependency>
    2.新建applicationContext_shiro.xml
    3.web.xml配置
      1)在ContextLoaderListener中引入applicationContext_shiro.xml
      2)添加shiroFilter，在OpenSessionInViewFilter下面
      <filter>
        <filter-name>shiroFilter</filter-name>
        <filter-class>
          org.springframework.web.filter.DelegatingFilterProxy
        </filter-class>
      </filter>
      <filter-mapping>
        <filter-name>shiroFilter</filter-name>
        <url-pattern>/*</url-pattern>
      </filter-mapping>
    4.新建ShiroRealm.java
    5.为了识别多个角色添加过滤器CustomRolesAuthorizationFilter实现AuthorizationFilter,及添加如下配置在applicationContext_shiro中
        <property name="filters">
            <map>
                <entry key="roles">
                    <bean class="example.service.shiro.CustomRolesAuthorizationFilter" />
                </entry>
            </map>
        </property>
    6.测试
      /toLogin = authc <!-- authc 表示需要认证才能访问的页面 -->
      /home = authc, perms[/home]  <!-- perms 表示需要该权限才能访问的页面 -->
      /admin = authc, roles[admin] <!--表示用户必需已通过认证,并拥有admin角色才可以正常发起'/admin'请求-->
      /home1/** = authc, roles[reg_user] <!--表示用户必需已通过认证,并拥有reg_user角色才可以正常发起'/home1'请求-->
      /home2/** = authc, roles[reg_user,admin] <!--表示用户必需已通过认证,并拥有admin或reg_user角色才可以正常发起'/home2'请求-->

四、示例一个接口多个实现类如何注入问题
    example.controller.AnimalController